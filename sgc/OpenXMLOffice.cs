using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using System.Data;
using System.IO;

namespace MSDN.Sample.XMLToExcel
{
    [Serializable()]
    public class OpenXMLOffice
    {
        public void XMLToExcel(MemoryStream msXML, ref MemoryStream msExcel)
        {
            DataSet dsXML = new DataSet();
            dsXML.ReadXml(msXML);
            DataTable tblXML = dsXML.Tables[0];
            msExcel = DataTableToMemoryStream(tblXML);
        }

        public void XMLToExcel(MemoryStream msXML, string strExcelPath)
        {
            DataSet dsXML = new DataSet();
            dsXML.ReadXml(msXML);
            DataTable tblXML = dsXML.Tables[0];
            DataTableToFilePath(tblXML, strExcelPath);
        }

        public void XMLToExcel(string strXMLPath, ref MemoryStream msExcel)
        {
            DataSet dsXML = new DataSet();
            dsXML.ReadXml(strXMLPath);
            DataTable tblXML = dsXML.Tables[0];
            msExcel = DataTableToMemoryStream(tblXML);
        }

        public void XMLToExcel(string strXMLPath, string strExcelPath)
        {
            DataSet dsXML = new DataSet();
            dsXML.ReadXml(strXMLPath);
            DataTable tblXML = dsXML.Tables[0];
            DataTableToFilePath(tblXML, strExcelPath);
        }

        public void XMLToExcel(string strXMLPath)
        {
            string strPath = Path.GetDirectoryName(strXMLPath);
            DataSet dsXML = new DataSet();
            dsXML.ReadXml(strXMLPath);
            strPath = strPath + "\\" + dsXML.DataSetName + ".xlsx";
            DataTable tblXML = dsXML.Tables[0];
            DataTableToFilePath(tblXML, strPath);
        }

        private MemoryStream DataTableToMemoryStream(DataTable tblInput)
        {
            MemoryStream msOutput = new MemoryStream();
            //create the empty spreadsheet template and save the file 
            //using the class generated by the Productivity tool 
            ExcelTemplate excelDoc = new ExcelTemplate();
            excelDoc.CreatePackage(msOutput);

            //populate the data into the spreadsheet  
            using (SpreadsheetDocument spreadsheet =
                        SpreadsheetDocument.Open(msOutput, true))
            {
                WorkbookPart workbook = spreadsheet.WorkbookPart;
                //create a reference to Sheet1  
                WorksheetPart worksheet = workbook.WorksheetParts.Last();
                SheetData data = worksheet.Worksheet.GetFirstChild<SheetData>();

                //add column names to the first row  
                Row header = new Row();
                header.RowIndex = (UInt32)1;

                foreach (DataColumn column in tblInput.Columns)
                {
                    Cell headerCell = createTextCell(
                        tblInput.Columns.IndexOf(column) + 1,
                        1,
                        column.ColumnName);

                    headerCell.StyleIndex = 1;
                    header.AppendChild(headerCell);

                    //Column headerColumn = data.Elements<Column>().Where(s => s..nam == 1).First();

                }
                data.AppendChild(header);

                //loop through each data row  
                DataRow contentRow;
                for (int i = 0; i < tblInput.Rows.Count; i++)
                {
                    contentRow = tblInput.Rows[i];
                    data.AppendChild(createContentRow(contentRow, i + 2));
                }
            }
            return msOutput;
        }

        private void DataTableToFilePath(DataTable tblInput, string filePath)
        {
            //string filePath = string.Empty;
            //create the empty spreadsheet template and save the file 
            //using the class generated by the Productivity tool 
            ExcelTemplate excelDoc = new ExcelTemplate();
            excelDoc.CreatePackage(filePath);

            //populate the data into the spreadsheet  
            using (SpreadsheetDocument spreadsheet =
                        SpreadsheetDocument.Open(filePath, true))
            {
                WorkbookPart workbook = spreadsheet.WorkbookPart;
                //create a reference to Sheet1  
                WorksheetPart worksheet = workbook.WorksheetParts.Last();
                SheetData data = worksheet.Worksheet.GetFirstChild<SheetData>();
                Sheet sheet = workbook.Workbook.Sheets.GetFirstChild<Sheet>();
                sheet.Name = tblInput.TableName;

                //add column names to the first row  
                Row header = new Row();
                header.RowIndex = (UInt32)1;

                foreach (DataColumn column in tblInput.Columns)
                {
                    Cell headerCell = createTextCell(
                        tblInput.Columns.IndexOf(column) + 1,
                        1,
                        column.ColumnName);

                    headerCell.StyleIndex = 1;
                    header.AppendChild(headerCell);
                }
                data.AppendChild(header);

                //loop through each data row  
                DataRow contentRow;
                for (int i = 0; i < tblInput.Rows.Count; i++)
                {
                    contentRow = tblInput.Rows[i];
                    data.AppendChild(createContentRow(contentRow, i + 2));
                }

                spreadsheet.WorkbookPart.Workbook.Save();
            }

        }

        private Cell createTextCell(int columnIndex, int rowIndex, object cellValue)
        {
            Cell cell = new Cell();

            cell.DataType = CellValues.InlineString;
            cell.CellReference = getColumnName(columnIndex) + rowIndex;

            InlineString inlineString = new InlineString();
            Text t = new Text();

            t.Text = cellValue.ToString();
            inlineString.AppendChild(t);
            cell.AppendChild(inlineString);

            return cell;
        }

        private Row createContentRow(DataRow dataRow, int rowIndex)
        {
            Row row = new Row
            {
                RowIndex = (UInt32)rowIndex
            };

            for (int i = 0; i < dataRow.Table.Columns.Count; i++)
            {
                Cell dataCell = createTextCell(i + 1, rowIndex, dataRow[i]);
                //dataCell.StyleIndex = 1;
                row.AppendChild(dataCell);
            }
            return row;
        }

        private string getColumnName(int columnIndex)
        {
            int dividend = columnIndex;
            string columnName = String.Empty;
            int modifier;

            while (dividend > 0)
            {
                modifier = (dividend - 1) % 26;
                columnName =
                    Convert.ToChar(65 + modifier).ToString() + columnName;
                dividend = (int)((dividend - modifier) / 26);
            }

            return columnName;
        }
    }


}
